///////////////////////////////////////////////////////////////////////////////////////////////////
// Filename: input.h
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once


//////////////
// INCLUDES //
//////////////
#include <cstdint>
#include <vector>


///////////////////////
// MY CLASS INCLUDES //
///////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////
// Class name: Input
///////////////////////////////////////////////////////////////////////////////////////////////////
class Input
{

public:
	Input();
	Input(const Input& other) = delete;
	Input(Input&& other) noexcept = delete;
	auto operator=(const Input& other) -> Input = delete;
	auto operator=(Input&& other) -> Input& = delete;
	~Input() = default;

	auto Update() -> BOOL;
    static auto IsKeyPressed(int key) -> bool;
	[[nodiscard]] auto WasKeyPressed(int key) const -> bool;

private:
	std::vector<uint8_t> m_key_states_now;
	std::vector<uint8_t> m_key_states_last;

};
